name: Summarize new issues
run-name: Summarize ${{ github.event.issue.title }}[${{ github.event.issue.number }}]

on:
  issues:
    types: [opened]

env:
  SUMMARY_LANGUAGE: ${{ vars.SUMMARY_LANGUAGE || 'cn' }}

jobs:
  summary:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      models: read
      contents: read

    services:
      crawl4ai:
        image: unclecode/crawl4ai:0.7.3
        ports:
          - 11235:11235
        options: --shm-size=1g

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate URL format
        id: urlValidation
        run: |
          URL="${{ github.event.issue.body }}"
          if [[ $URL =~ ^https?:// ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "url=$URL" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "URL validation failed: '$URL' is not a valid HTTP/HTTPS URL"
          fi
      
      - name: Submit crawl job to Crawl4AI
        id: crawlSubmit
        if: steps.urlValidation.outputs.valid == 'true'
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'http://localhost:11235/crawl'
          method: 'POST'
          contentType: 'application/json'
          data: '{"urls": ["${{ steps.urlValidation.outputs.url }}"], "priority": 10, "crawler_params": {"markdown_generator": {"options": {"ignore_links": false, "ignore_images": false}}, "content_filter": {"type": "PruningContentFilter", "threshold": 0.45}}}'
          timeout: 10000
        continue-on-error: true

      - name: Wait for crawl completion
        id: crawlResult
        if: steps.crawlSubmit.outcome == 'success' && steps.crawlSubmit.outputs.response != ''
        run: |
          # Debug: Show raw response
          echo "Raw response from crawl submit:"
          echo '${{ steps.crawlSubmit.outputs.response }}'
          
          # Validate and extract task_id with error handling
          RESPONSE='${{ steps.crawlSubmit.outputs.response }}'
          if [ -z "$RESPONSE" ] || [ "$RESPONSE" = "null" ]; then
            echo "Error: Empty or null response from crawl submit"
            exit 1
          fi
          
          # Check if response contains valid JSON
          if ! echo "$RESPONSE" | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON response from crawl submit"
            echo "Response content: $RESPONSE"
            exit 1
          fi
          
          TASK_ID=$(echo "$RESPONSE" | jq -r '.task_id // empty')
          if [ -z "$TASK_ID" ] || [ "$TASK_ID" = "null" ]; then
            echo "Error: No task_id found in response"
            echo "Response structure: $(echo "$RESPONSE" | jq keys 2>/dev/null || echo "Failed to parse keys")"
            exit 1
          fi
          
          echo "task_id=$TASK_ID" >> $GITHUB_OUTPUT
          echo "Successfully extracted task_id: $TASK_ID"
          
          # Wait for task completion (max 60 seconds)
          for i in {1..12}; do
            POLL_RESPONSE=$(curl -s "http://localhost:11235/task/$TASK_ID")
            
            # Check if curl succeeded and returned valid JSON
            if [ $? -ne 0 ] || [ -z "$POLL_RESPONSE" ]; then
              echo "Attempt $i: Failed to get response from task endpoint"
              sleep 5
              continue
            fi
            
            if ! echo "$POLL_RESPONSE" | jq empty 2>/dev/null; then
              echo "Attempt $i: Invalid JSON response from task endpoint"
              echo "Response content: $POLL_RESPONSE"
              sleep 5
              continue
            fi
            
            STATUS=$(echo "$POLL_RESPONSE" | jq -r '.status // "unknown"')
            echo "Attempt $i: Task status: $STATUS"
            
            if [ "$STATUS" = "completed" ]; then
              echo "Task completed successfully"
              echo "response<<EOF" >> $GITHUB_OUTPUT
              echo "$POLL_RESPONSE" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$STATUS" = "failed" ]; then
              echo "Task failed"
              echo "Error details: $(echo "$POLL_RESPONSE" | jq -r '.error // "No error details"')"
              exit 1
            fi
            
            sleep 5
          done
          
          echo "Task timeout after 60 seconds"
          exit 1
        continue-on-error: true

      - name: Determine prompt file
        id: promptFile
        run: |
          if [[ "${{ env.SUMMARY_LANGUAGE }}" == "en" ]]; then
            echo "file=./.github/prompts/summary-system-en.txt" >> $GITHUB_OUTPUT
          else
            echo "file=./.github/prompts/summary-system-cn.txt" >> $GITHUB_OUTPUT
          fi

      - name: Rate limiting delay
        run: sleep 2

      - name: Truncate content for token limit
        id: truncateContent
        run: |
          # Extract markdown content from Crawl4AI response or use fallback
          if [ '${{ steps.crawlResult.outcome }}' = 'success' ] && [ '${{ steps.crawlResult.outputs.response }}' != '' ]; then
            CONTENT=$(echo '${{ steps.crawlResult.outputs.response }}' | jq -r '.result.fit_markdown // .result.markdown // .result.cleaned_html // .result.raw_html // ""')
          else
            CONTENT=""
          fi
          
          # Use fallback if no content extracted
          if [ -z "$CONTENT" ] || [ "$CONTENT" = "null" ]; then
            CONTENT="${{ format('URL: {0}\nTitle: {1}\nDescription: {2}', github.event.issue.body, github.event.issue.title, 'Content could not be retrieved from the URL. Please check if the URL is accessible and try again.') }}"
          fi
          # Truncate to approximately 6000 characters to stay under 8000 token limit
          TRUNCATED_CONTENT=$(echo "$CONTENT" | head -c 6000)
          if [[ ${#CONTENT} -gt 6000 ]]; then
            TRUNCATED_CONTENT="$TRUNCATED_CONTENT... [Content truncated to fit token limit]"
          fi
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$TRUNCATED_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run AI inference
        id: inference
        uses: actions/ai-inference@v1
        with:
          max-tokens: 2000
          system-prompt-file: ${{ steps.promptFile.outputs.file }}
          prompt: |
            ${{ steps.truncateContent.outputs.content }}

      - name: Comment with AI summary
        run: |
          echo "${{ steps.inference.outputs.response }}" | gh issue comment $ISSUE_NUMBER --body-file -
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          RESPONSE: ${{ steps.inference.outputs.response }}
