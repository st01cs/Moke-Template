name: Summarize new issues
run-name: Summarize ${{ github.event.issue.title }}[${{ github.event.issue.number }}]

on:
  issues:
    types: [opened]

env:
  SUMMARY_LANGUAGE: ${{ vars.SUMMARY_LANGUAGE || 'cn' }}

jobs:
  summary:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      models: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate URL format
        id: urlValidation
        run: |
          URL="${{ github.event.issue.body }}"
          if [[ $URL =~ ^https?:// ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "url=$URL" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "URL validation failed: '$URL' is not a valid HTTP/HTTPS URL"
          fi
      
      - name: Scrape with Firecrawl
        id: firecrawlScrape
        if: steps.urlValidation.outputs.valid == 'true'
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.firecrawl.dev/v2/scrape'
          method: 'POST'
          contentType: 'application/json'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.FIRECRAWL_API_KEY }}"}'
          data: '{"url": "${{ steps.urlValidation.outputs.url }}", "formats": ["markdown"]}'
          timeout: 30000
        continue-on-error: true

      - name: Determine prompt file
        id: promptFile
        run: |
          if [[ "${{ env.SUMMARY_LANGUAGE }}" == "en" ]]; then
            echo "file=./.github/prompts/summary-system-en.txt" >> $GITHUB_OUTPUT
          else
            echo "file=./.github/prompts/summary-system-cn.txt" >> $GITHUB_OUTPUT
          fi

      - name: Rate limiting delay
        run: sleep 2

      - name: Truncate content for token limit
        id: truncateContent
        run: |
          python3 << 'PYTHON_SCRIPT'
          import json
          import os
          import sys

          def extract_content():
              """Extract content from Firecrawl response with robust error handling"""
              
              # Get environment variables
              scrape_outcome = os.environ.get('SCRAPE_OUTCOME', '')
              raw_response = os.environ.get('RAW_RESPONSE', '')
              fallback_url = os.environ.get('FALLBACK_URL', '')
              fallback_title = os.environ.get('FALLBACK_TITLE', '')
              
              print(f"Firecrawl scrape outcome: {scrape_outcome}")
              
              content = ""
              
              # Try to extract content from successful response
              if scrape_outcome == 'success' and raw_response:
                  try:
                      response_data = json.loads(raw_response)
                      print("Successfully parsed JSON response")
                      
                      # Try multiple content fields
                      content = (
                          response_data.get('data', {}).get('markdown') or
                          response_data.get('data', {}).get('content') or
                          response_data.get('markdown') or
                          response_data.get('content') or
                          ""
                      )
                      
                      if content:
                          print("Successfully extracted content from Firecrawl response")
                      else:
                          print("Warning: No content found in response data")
                          
                  except json.JSONDecodeError as e:
                      print(f"Warning: Failed to parse JSON response: {e}")
                      print(f"Response preview: {raw_response[:200]}...")
                  except Exception as e:
                      print(f"Warning: Unexpected error processing response: {e}")
              else:
                  print("Warning: Firecrawl scrape step was not successful or response is empty")
              
              # Use fallback if no content extracted
              if not content:
                  print("Using fallback content due to extraction failure")
                  content = f"URL: {fallback_url}\nTitle: {fallback_title}\nDescription: Content could not be retrieved from the URL. Please check if the URL is accessible and try again."
              
              return content

          def truncate_content(content, max_length=6000):
              """Safely truncate content to stay under token limit"""
              
              content_length = len(content)
              print(f"Original content length: {content_length} characters")
              
              if content_length > max_length:
                  truncated = content[:max_length] + "... [Content truncated to fit token limit]"
                  print(f"Content truncated from {content_length} to {max_length} characters")
                  return truncated
              else:
                  print("Content within limit, no truncation needed")
                  return content

          def set_github_output(name, value):
              """Safely set GitHub Actions output"""
              
              github_output = os.environ.get('GITHUB_OUTPUT')
              if not github_output:
                  print("Warning: GITHUB_OUTPUT not set")
                  return
              
              delimiter = "CONTENT_EOF_DELIMITER"
              with open(github_output, 'a', encoding='utf-8') as f:
                  f.write(f"{name}<<{delimiter}\n")
                  f.write(value)
                  f.write(f"\n{delimiter}\n")

          try:
              # Extract and process content
              content = extract_content()
              truncated_content = truncate_content(content)
              
              # Set output for next step
              set_github_output('content', truncated_content)
              print("Successfully set content output for AI inference")
              
          except Exception as e:
              print(f"Error: {e}")
              # Set fallback content on error
              fallback = f"URL: {os.environ.get('FALLBACK_URL', '')}\nTitle: {os.environ.get('FALLBACK_TITLE', '')}\nDescription: Error processing content."
              set_github_output('content', fallback)
              sys.exit(0)  # Don't fail the workflow, continue with fallback

          PYTHON_SCRIPT
        env:
          SCRAPE_OUTCOME: ${{ steps.firecrawlScrape.outcome }}
          RAW_RESPONSE: ${{ steps.firecrawlScrape.outputs.response }}
          FALLBACK_URL: ${{ github.event.issue.body }}
          FALLBACK_TITLE: ${{ github.event.issue.title }}

      - name: Run AI inference
        id: inference
        uses: actions/ai-inference@v1
        with:
          max-tokens: 2000
          system-prompt-file: ${{ steps.promptFile.outputs.file }}
          prompt: |
            ${{ steps.truncateContent.outputs.content }}

      - name: Comment with AI summary
        run: |
          echo "${{ steps.inference.outputs.response }}" | gh issue comment $ISSUE_NUMBER --body-file -
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          RESPONSE: ${{ steps.inference.outputs.response }}
