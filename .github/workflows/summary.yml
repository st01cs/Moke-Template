name: Summarize new issues
run-name: Summarize ${{ github.event.issue.title }}[${{ github.event.issue.number }}]

on:
  issues:
    types: [opened]

env:
  SUMMARY_LANGUAGE: ${{ vars.SUMMARY_LANGUAGE || 'cn' }}

jobs:
  summary:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      models: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate URL format
        id: urlValidation
        run: |
          URL="${{ github.event.issue.body }}"
          if [[ $URL =~ ^https?:// ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "url=$URL" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "URL validation failed: '$URL' is not a valid HTTP/HTTPS URL"
          fi
      
      - name: Scrape with Firecrawl
        id: firecrawlScrape
        if: steps.urlValidation.outputs.valid == 'true'
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.firecrawl.dev/v2/scrape'
          method: 'POST'
          contentType: 'application/json'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.FIRECRAWL_API_KEY }}"}'
          data: '{"url": "${{ steps.urlValidation.outputs.url }}", "formats": ["markdown"]}'
          timeout: 30000
        continue-on-error: true

      - name: Determine prompt file
        id: promptFile
        run: |
          if [[ "${{ env.SUMMARY_LANGUAGE }}" == "en" ]]; then
            echo "file=./.github/prompts/summary-system-en.txt" >> $GITHUB_OUTPUT
          else
            echo "file=./.github/prompts/summary-system-cn.txt" >> $GITHUB_OUTPUT
          fi

      - name: Rate limiting delay
        run: sleep 2

      - name: Truncate content for token limit
        id: truncateContent
        run: |
          set -e  # Exit on any error
          
          # Initialize content variable
          CONTENT=""
          
          # Debug: Show response outcome
          echo "Firecrawl scrape outcome: '${{ steps.firecrawlScrape.outcome }}'"
          
          # Extract markdown content from Firecrawl response with robust error handling
          if [[ '${{ steps.firecrawlScrape.outcome }}' == 'success' ]]; then
            # Get raw response and validate it
            RAW_RESPONSE='${{ steps.firecrawlScrape.outputs.response }}'
            
            if [[ -n "$RAW_RESPONSE" && "$RAW_RESPONSE" != "null" && "$RAW_RESPONSE" != "" ]]; then
              # Validate JSON before processing
              if echo "$RAW_RESPONSE" | jq empty 2>/dev/null; then
                # Extract content with multiple fallback options
                CONTENT=$(echo "$RAW_RESPONSE" | jq -r '.data.markdown // .data.content // .markdown // .content // ""' 2>/dev/null || echo "")
                echo "Successfully extracted content from Firecrawl response"
              else
                echo "Warning: Invalid JSON response from Firecrawl"
                echo "Response preview: ${RAW_RESPONSE:0:200}..."
              fi
            else
              echo "Warning: Empty or null response from Firecrawl"
            fi
          else
            echo "Warning: Firecrawl scrape step was not successful"
          fi
          
          # Use fallback if no content extracted
          if [[ -z "$CONTENT" || "$CONTENT" == "null" ]]; then
            echo "Using fallback content due to extraction failure"
            FALLBACK_URL='${{ github.event.issue.body }}'
            FALLBACK_TITLE='${{ github.event.issue.title }}'
            CONTENT="URL: ${FALLBACK_URL}"$'\n'"Title: ${FALLBACK_TITLE}"$'\n'"Description: Content could not be retrieved from the URL. Please check if the URL is accessible and try again."
          fi
          
          # Safely truncate content to stay under token limit
          CONTENT_LENGTH=${#CONTENT}
          echo "Original content length: $CONTENT_LENGTH characters"
          
          if [[ $CONTENT_LENGTH -gt 6000 ]]; then
            TRUNCATED_CONTENT="${CONTENT:0:6000}... [Content truncated to fit token limit]"
            echo "Content truncated from $CONTENT_LENGTH to 6000 characters"
          else
            TRUNCATED_CONTENT="$CONTENT"
            echo "Content within limit, no truncation needed"
          fi
          
          # Safely output content using proper escaping
          {
            echo "content<<CONTENT_EOF"
            echo "$TRUNCATED_CONTENT"
            echo "CONTENT_EOF"
          } >> $GITHUB_OUTPUT

      - name: Run AI inference
        id: inference
        uses: actions/ai-inference@v1
        with:
          max-tokens: 2000
          system-prompt-file: ${{ steps.promptFile.outputs.file }}
          prompt: |
            ${{ steps.truncateContent.outputs.content }}

      - name: Comment with AI summary
        run: |
          echo "${{ steps.inference.outputs.response }}" | gh issue comment $ISSUE_NUMBER --body-file -
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          RESPONSE: ${{ steps.inference.outputs.response }}
